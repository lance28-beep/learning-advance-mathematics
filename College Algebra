# Math 110 Algebra - Fall 2018
# Exponents
After completing this section, students should be able to:
- Explain the product rule, quotient rule, and power rule for exponentiation by writing out powers of a variable as repeated multiplication.
- Rewrite expressions with negative exponents so that all exponents are positive.
- Use the product rule, quotient rule, and power rule to simplify exponential expressions.
- Decide whether equations involving exponents are always true or not by testing examples.
- Rewrite fractional exponents in terms of radicals.
- Calculate numbers raised to fractional exponents without a calculator.

# Exponent rules
2^5 = 2*2*2*2*2 <-short hand of 2(power / exponent by 5)
x^n = x * n <- self multiply by itself
2 & X - are Base
5 & n - are exponent sometimes called power.
```
let base =  2;
let exponent = 5;
Math.pow(base,exponent)
or 
base**exponent 
```

# The Product Rule
x^n * x^m = x^n+m
- multiply two expressiong with the same base
- add the exponents

```
let base =  2;
let exponent1 = 5;
let exponent2 = 3;
let x = Math.pow(base,exponent1)*Math.pow(base,exponent2)
or 
base**exponent1  * base**exponent2
```

# The Quotient Rule
x^n / x^m =  x^n-m
- divide two expressions with the same base
- subtract the exponent
```
console.log(base**6 / base**2) // 81
console.log(base**(6-2)) //
81
```

# the power rule
(x^n)m = x^n*m
- raise a power to a power
- multiply the exponent
```
console.log((5**4)**3) // 244140625
console.log(5**12) // 244140625

```

# the power zero
x^0 = 1
```
console.log(5**0) //1
console.log(5**3/5**3) //1
```

# Negative exponents
x^-n = 1/x^n
```
console.log(5**-1) // 0.2
console.log(1/5**1) // 0.2
```

# Fractional Exponents
x^1/N = 3~x
```
console.log(64**(1/3)) /// 3.9999999999999996  or 4
console.log(Math.cbrt(64)) /// 4
```

# Distribute an Exponent over product
(x * y)^n = (x^n * y^n)
```
console.log((5*7)**3) // 42875
console.log((5**3) * (7**3)) // 42875
```

# Distribute an Exponent over quotient
(x/y)^n = (x^n / y^n)
```
console.log((5/7)**5) //0.18593443208187066
console.log((5**5)/(7**5)) //0.18593443208187066
```